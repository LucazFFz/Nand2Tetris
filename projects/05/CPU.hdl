// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=Ainstruction);
    Not(in=Ainstruction, out=Cinstruction);
    
    // Only pass trough certain control bits when preforming an C instruction
    // ALU instruction bits and multiplexer control bits will not effect the CPU when preforming an A instruction, 
    // therefore does not have to be gated
    And(a=instruction[0], b=Cinstruction, out=instJGT);
    And(a=instruction[1], b=Cinstruction, out=instJEQ);
    And(a=instruction[2], b=Cinstruction, out=instJLT);
    And(a=instruction[3], b=Cinstruction, out=writeM);
    And(a=instruction[4], b=Cinstruction, out=instloadD);
    And(a=instruction[5], b=Cinstruction, out=instloadA);

    // load A register from instruction when preforming an A instrution, 
    // else load from ALU output when preforming an C instruction
    Mux16(a=instruction, b=ALUout, sel=Cinstruction, out=Aregin); 
    Or(a=instloadA, b=Ainstruction, out=loadA);
    ARegister(in=Aregin, load=loadA, out=Aregout, out[0..14]=addressM);

    DRegister(in=ALUout, load=instloadD, out=Dregout);

    Mux16(a=Aregout, b=inM, sel=instruction[12], out=AMout); // load ALU input from A register output or inM
    ALU(x=Dregout, y=AMout, zx=instruction[11], 
                            nx=instruction[10], 
                            zy=instruction[9], 
                            ny=instruction[8], 
                            f=instruction[7], 
                            no=instruction[6], 
                            out=ALUout, out=outM, zr=ZR,  ng=NG);

    // branching logic
    Not(in=ZR, out=notZR);
    Not(in=NG, out=notNG);

    And(a=notZR, b=notNG, out=notZRAndnotNG);
    And(a=ZR, b=notNG, out=ZRAndnotNG);
    And(a=notZR, b=NG, out=notZRAndNG);

    And(a=instJGT, b=notZRAndnotNG, out=JGT);
    And(a=instJEQ, b=ZRAndnotNG, out=JEQ);
    And(a=instJLT, b=notZRAndNG, out=JLT);

    Or(a=JGT, b=JEQ, out=JGE);
    Or(a=JEQ, b=JLT, out=JLE);
    Or(a=JLE, b=JGE, out=loadPC);

    Not(in=loadPC, out=incPC); // when not loading PC, increment instead
    
    PC(in=Aregout, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc);
}